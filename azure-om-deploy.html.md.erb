---
title: Deploying Ops Manager on Azure
owner: Ops Manager
---

<strong><%= modified_date %></strong>
<html class="list-style-none"></html>

This topic describes how to deploy Ops Manager for Pivotal Container Service (PKS)
on Microsoft Azure using Terraform templates.

The Terraform template for PKS on Azure describes a set of Azure resources and properties.
For more information about how Terraform creates resources in Azure, see the
[Azure Provider](https://www.terraform.io/docs/providers/azurerm/index.html) topic on the Terraform site.

After you complete this procedure, follow the instructions in the
[Configuring Ops Manager on Azure](azure-om-config.html) topic.

## <a id="prereqs"></a>Prerequisites

In addition to fulfilling the prerequisites listed in the
[Azure Prerequisites and Resource Requirements](azure-requirements.html) topic, ensure you have the following:

* The [Terraform CLI](https://www.terraform.io/intro/getting-started/install.html)
* The [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)

## <a id="download"></a>Step 1: Download and Edit the Terraform Variables File

Before you can run Terraform commands to create infrastructure resources,
you must fill out a template variables file.
To download and edit the Terraform template variables file, follow the steps below:

1. Navigate to the Pivotal Application Service (PAS) release on [Pivotal Network](https://network.pivotal.io).
  <p class="note"><strong>Note</strong>: The Azure Terraform template installs Ops Manager for
  Pivotal Container Service (PKS). The template can be used when deploying either PAS or PKS.</p>

1. Download the **Azure Terraform Templates** ZIP file for the most recent release.

1. Extract the contents of the ZIP file into a directory and
move the directory into the `workspace` directory on your local machine.

1. From a terminal window, navigate to the directory with the contents of the ZIP file. For example:
  <pre class="terminal">$ cd ~/workspace/pivotal-cf-terraforming-azure</pre>

1. Navigate to the `terraforming-pks` directory that contains the PKS Terraform files:

    ```
    cd terraforming-pks
    ```

1. In the `terraforming-pks` directory, create a file named `terraform.tfvars`:

    ```
    touch terraform.tfvars
    ```

1. Open the `terraform.tfvars` file and add the following:

    ```
    subscription_id       = "YOUR-SUBSCRIPTION-ID"
    tenant_id             = "YOUR-TENANT-ID"
    client_id             = "YOUR-CLIENT-ID"
    client_secret         = "YOUR-CLIENT-SECRET"

    env_name              = "YOUR-ENVIRONMENT-NAME"
    location              = "YOUR-AZURE-LOCATION"
    ops_manager_image_uri = "YOUR-OPS-MAN-IMAGE-URI"
    dns_suffix            = "YOUR-DNS-SUFFIX"
    vm_admin_username     = "YOUR-ADMIN-USERNAME"
    ```

1. Edit the values in the file according to the table below:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-SUBSCRIPTION-ID</code></td>
      <td>Enter the subscription ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-TENANT-ID</code></td>
      <td>Enter the tenant ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-CLIENT-ID</code></td>
      <td>Enter the client ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-CLIENT-SECRET</code></td>
      <td>Enter your Azure service client secret. Terraform requires this secret to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in Azure. Terraform prepends the names of the resources it creates with this environment name. Example: <code>pcf</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZURE-LOCATION</code></td>
      <td>Enter the name of the Azure location in which you want Terraform to create resources. Example: <code>Central US</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-URI</code></td>
      <td>Enter the URL for the Ops Manager Azure image you want to boot. You can find this code in the PDF included with the Ops Manager release on <a href="https://network.pivotal.io/">Pivotal Network</a>.</td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name to use as part of the system domain for your PCF deployment. Terraform creates DNS records in Azure using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>.
      For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pcf</code> as your environment name, Terraform creates DNS records at <code>pcf.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ADMIN-USERNAME</code></td>
      <td>Enter the admin username you want to use for your Ops Manager deployment.</td>
    </tr>
  </table>

## <a id="resources"></a>Step 2: Create Azure Resources with Terraform ##

To create resources on Azure using the Terraform CLI, follow the steps below:

1. From the directory that contains the Terraform files,
run the `terraform init` command to initialize the directory based on the information you specified in the `terraform.tfvars` file:

    ```
    terraform init
    ```

1. Run the following command to create the execution plan for Terraform:

    ```
    terraform plan -out=plan
    ```

1. Run the command below to execute the plan from the previous step.
It may take several minutes for Terraform to create all the resources in Azure.

    ```
    terraform apply plan
    ```

## <a id="dns"></a>Step 3: Create DNS Record ##

1. In a browser, navigate to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. Create a Name Server (NS) record for your PCF system domain.
Your system domain is `YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX`.

1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.


## <a id="next"></a> Next Steps

After you complete this procedure, follow the instructions in the [Configuring Ops Manager on Azure](azure-om-config.html) topic.
