---
title: Defining Network Profiles (NSX-T Only)
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to define network profiles for Kubernetes clusters provisioned with PKS on vSphere with NSX-T.

## <a id='about'></a> About Network Profiles

Network profiles let you customize NSX-T configuration parameters at the time of cluster creation. Use Cases for Network Profiles include the following:

Profile Type 								| Description
--------------------------------------------|----------------------------
[Load Balancer Sizing](#lb-sizing)			| Customize the size of the [NSX-T load balancer](about-lb.html#with-nsx-t) that is deployed when a Kubernetes cluster is created using PKS.
[Custom Pod Networks](#custom-pods)	| Assign IP addresses, from a dedicated IP block, to pods in your Kubernetes cluster.
[Routable Pod Networks](#routable-pods) 	| Assign routable IP addresses, from a dedicated IP block, to pods in your Kubernetes cluster. 
[Bootstrap Namespace Groups](#ns-groups)	| Specify a namespace group to bootstrap Kubernetes master nodes. 
[Pod Subnet Prefix](#pod-prefix)			| Specify the size of the Pod subnet.
[Customizable Floating IP](#floating-ip)	| Specify a custom floating IP pool.
[Multi T0 Router](#multi-t0)				| Define a dedicate Multi-T0 for multitenancy clusters.


## <a id="define-profile"></a> Defining Network Profiles

Network profiles are defines using JSON files. For example, here are two network profiles for two different customers:

```
{
    "name": "np-alt",
    "description": "Network Profile for Customer A",
    "parameters": {
        "lb_size": "small",
        "t0_router_id": "5a7a82b2-37e2-4d73-9cb1-97a8329e1a90",
        "fip_pool_ids": [
            "e50e8f6e-1a7a-45dc-ad49-3a607baa7fa0"
        ],
        "pod_ip_block_ids": [
            "7056d707-acec-470e-88cf-66bb86fbf439"
        ],
        "master_vms_nsgroup_id": "9b8d535a-d3b6-4735-9fd0-56305c4a5293",
        "pod_subnet_prefix" : 27
    }
}
```

```
{
    "name": "np-alt",
    "description": "Network Profile for Customer B",
    "parameters": {
        "lb_size": "small",
        "t0_router_id": "5a7a82b2-37e2-4d73-9cb1-97a8329e1a90",
        "fip_pool_ids": [
            "e50e8f6e-1a7a-45dc-ad49-3a607baa7fa0"
        ],
    	"pod_routable": true,
    	"pod_ip_block_ids": [
      		"ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
      		"ebe78a74-a5d5-4dde-ba76-9cf4067eee56"
    	]
        "master_vms_nsgroup_id": "9b8d535a-d3b6-4735-9fd0-56305c4a5293",
        "pod_subnet_prefix" : 27
    }
}
```

## <a id="define-profile"></a> Network Profile Parameters

Before you can create a network profile, you must define your network profile configuration in a JSON file as described below.
For information about creating network profiles, see [Create a Network Profile](#create-profile).

Parameter 				| Type 			| Description
------------------------|----------------------------
`name`	  				| User-defined name for the network profile.
`description`   		| User-defined description for the network profile.
`parameters`    		| One or more name-value pairs.
`lb_size`	  			| Size of the NSX-T load balancer deployed with the Kubernetes cluster: `small`, `medium`, or `large`.
`pod_ip_block_ids`		| UUID of the IP block from NSX Manager, comma-separated.
`pod_routable`  		| Set to `true` to enable routable pods (default is `false`).
`master_vms_nsgroup_id` | UUID of a Namespace Group (nsgroup).
`fip_pool_ids`			| UUID of a Floating IP Pool.
`pod_subnet_prefix` 	| CIDR block range for the Pods subnet.
`t0_router_id` 			| UUID of a dedicated T0 Router.

## <a id="create-profile"></a> Creating Network Profiles

Once the network profile is defined in a JSON file, you create the profile using the PKS CLI. For more information, see [Creating Network Profile](#create-profile).

## <a id='profiles-usage'></a>

Here are examples for each type of Network Profile use case.

### <a id='lb-sizing'></a> Load Balancer Sizing

Using a network profile, you can customize the size of the load balancer that is deployed when a Kubernetes cluster is created using PKS.
See [Load Balancers in PKS Deployments on vSphere with NSXâ€‘T](about-lb.html#with-nsx-t) for more information.

The following network profile, `np-lb-med.json`, defines a medium load balancer:

```
{
 "name": "lb-profile-medium",
 "description": "Network profile for medium size NSX-T load balancer",
 "parameters": { 
 	"lb_size": "medium" 
 	}
}
```

```
{
 "name": "lb-profile-large",
 "description": "Network profile for large size NSX-T load balancer",
 "parameters": { 
 	"lb_size": "large" 
 	}
}
```

<p class="note"><strong>Note</strong>: The large load balancer requires a Bare Metal NSX Edge Node.</p>

### <a name='custom-pod-blocks'></a> Custom Pod IP Blocks

When you configure your [NSX-T infrastructure for PKS](nsxt-prepare-env.html#plan-ip-blocks), you must create a **Pods IP Block**. By default, this subnet is non-routable. When a Kubernetes cluster is deployed, each pod receives an IP address from the **Pods IP Block** you created. Because the pod IP addresses are non-routable, NSX-T creates a SNAT rule on the T0 router to allow network egress from the pods. This configuration is shown in the diagram below.

  <img src="images/nsxt/non-routable-pods.png" alt="Non-routable pod network with SNAT">

You can use a network profile to override the global non-routable **Pods IP Block** that you configured in preparation for deploying PKS with NSX-T with a new non-routable IP block. For example, the following network profile, `np-non-routable-pods.json`, defines a non-routable /24 IP block for pods. With this approach, the non-routable IP block specified in the network profile definition overrides the default non-routable **Pods IP Block** specified in the PKS tile.

```
{
  "description": "Network profile with two non-routable pod networks",
  "name": "small-routable-pod",
  "parameters": {
    "pod_ip_block_ids": [
      "ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
      "ebe78a74-a5d5-4dde-ba76-9cf4067eee56"
    ]
  }
}
```

### <a id='routable-pod-blocks'></a> Routable Pod IP Blocks

Using a network profile, you can assign routable IP addresses from a dedicated routable IP block to pods in your Kubernetes cluster. When a cluster is deployed using that network profile, the routable IP block overrides the default non-routable IP block described created for deploying PKS. When you deploy a Kubernetes cluster using that network profile, each pod receives a routable IP address. This configuration is shown in the diagram below. If you use routable pods, the SNAT rule is not created.

  <img src="images/nsxt/routable-pods.png" alt="Routable pod network using network profiles">

To use routable pods, do the following after you deploy PKS:

1. Define a routable /24 IP block in NSX-T. For information about creating IP blocks,
see [Create NSX-T Objects](nsxt-prepare-env.html#create-objects-network-objects) in _Preparing NSX-T Before Deploying PKS_.
2. Define a network profile that references the routable IP block.

For example, the following network profile, `np-routable-pods.json`, defines routable pod addresses from two /24 IP blocks:

```
{
  "description": "Network profile with small load balancer and two routable pod networks",
  "name": "small-routable-pod",
  "parameters": {
    "pod_routable": true,
    "pod_ip_block_ids": [
      "ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
      "ebe78a74-a5d5-4dde-ba76-9cf4067eee56"
    ]
  }
}
```

<p class="note"><strong>Note</strong>: You must specify pod_routable = true for the IP block to be routable (and of course it must in fact be routable).</p>

### <a id='ns-groups'></a> Bootstrap Namespace Groups

Most of the NSX-T virtual interface tags used by PKS are added to the Kubernetes master node(s) during the node initialization phase of cluster provisioning. To add tags to virtual interfaces, the Kubernetes master node(s) needs to connect to the NSX-T Manager API. Network security rules provisioned prior to cluster creation time will most likely not allow nodes to connect to NSX-T, if such rules are based on namespace groups (nsGroups) managed by PKS. 

To address this bootstrap issue, PKS exposes an optional configuration parameter in Network Profiles to systematically add Kubernetes master nodes to a pre-provisioned nsGroup. The BOSH vSphere cloud provider interface (CPI) has the ability to use the nsGroup and automatically manage members on it following the BOSH VM lifecycle for Kubernetes master nodes.

To bootstrap nsGroups:

1. Create the nsGroup in NSX Manager prior to provisioning a Kubernetes cluster using PKS. For instructions, see [Create an NSGroup](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.3/com.vmware.nsxt.admin.doc/GUID-718E769B-8D89-485B-8DBD-04F1F82CFE14.html) in the NSX-T documentation.
2. Define a network profile that references the nsGroup UUID that the BOSH CPI can use to bootstrap the master node(s).

For example, the following network profile, `np-bootstrap-nsGroup.json`, specifies a nsGroup that the BOSH CPI will use to dynamically update Kubernetes master node(s) memberships:

```
ubuntu@opsmanager-2-3:~$ cat np-custB.json 
{
    "name": "np-alt",
    "description": "Network Profile for Customer B",
    "parameters": {
        "master_vms_nsgroup_id": "9b8d535a-d3b6-4735-9fd0-56305c4a5293",
    }
}
```

### <a id='pod-prefix'></a> Pod Subnet Prefix

Each time a Kubernetes namespace is created, a subnet from the Pods IP Block is allocated. The subnet size carved out from this block for such purposes is /24. See [Pods IP Block](nsxt-prepare-env.html#pods-ip-block) for more information.

You can define a Network Profile using the `pod_subnet_prefix` parameter to cusomtize the size of the pod subnet reserved for namespaces. For example, the following network profile, `np-pod-prefix.json`, specifies /27 for the size of the Pods IP Block subnet:

```
{
    "name": "np-pod-prefix",
    "description": "Network Profile for Customizing Pod Subnet Size",
    "parameters": {
        "pod_subnet_prefix" : 27
    }
}
```

### <a id='floating-ip'></a> Floating IP Address Block

To deploy PKS no vSphere with NSX-T, you must define a Floating IP Pool in NSX Manager. The IP addresses in this floating IP pool are assigned to load balancers automatically provisioned by NSX-T when you deploy a Kubernetes cluster using PKS. See [Plan Network CIDRs](nsxt-prepare-env.html#plan-cidrs) for more information.

You can define a Network Profile that specifies a custom Floating IP Pool to use instead of the default one specified in the PKS tile.

To do this:

1. Create a Floating IP Pool using NSX Manager prior to provisioning a Kubernetes cluster using PKS. For instructions, see [Create IP Pool](https://docs.vmware.com/en/VMware-NSX-T-Data-Center/2.3/com.vmware.nsxt.admin.doc/GUID-8639F737-1D75-4177-9D31-5F20551DEE8E.html) in the NSX-T documentation.
2. Define a network profile that references the Floating IP Pool UUID that you defined.

```
{
    "name": "np-custom-fip",
    "description": "Network Profile for Custom Floating IP Pool",
    "parameters": {
        "fip_pool_ids": [
            "e50e8f6e-1a7a-45dc-ad49-3a607baa7fa0"
      		"ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
    	]
    }
}
```

### <a id='multi-t0'></a> Multi-T0 Router

Using PKS on vSphere with NSX-T, you can deploy Kubernetes clusters on dedicated T0 routers, creating a full multi-tenant environment. As depicted below, with this configuration you will have a shared T0 router where the PKS Control Plane is hosted, and which connects to each customer T0 router via BGP. To support multitenancy, you will need to configure firewall rules and security settings in NSX Manager. 

To do this:

1. Create a dedciated T0 router for each customer tenant, as well as BGP routes and security firewall rules. For instructions, see [Create Tenant T0 Router]() in this documentation.
2. Define a network profile that references the Floating IP Pool UUID that you defined.

```
{
    "name": "np-alt",
    "description": "Network Profile for Customer B",
    "parameters": {
        "lb_size": "small",
        "t0_router_id": "5a7a82b2-37e2-4d73-9cb1-97a8329e1a90",
        "fip_pool_ids": [
            "e50e8f6e-1a7a-45dc-ad49-3a607baa7fa0"
        ],
    	"pod_routable": true,
    	"pod_ip_block_ids": [
      		"ebe78a74-a5d5-4dde-ba76-9cf4067eee55",
      		"ebe78a74-a5d5-4dde-ba76-9cf4067eee56"
    	]
        "master_vms_nsgroup_id": "9b8d535a-d3b6-4735-9fd0-56305c4a5293",
        "pod_subnet_prefix" : 27
    }
}
```