---
title: Deploying Ops Manager on AWS
owner: Ops Manager
---

<strong><%= modified_date %></strong>
<html class="list-style-none"></html>

This topic describes how to deploy Ops Manager for Pivotal Container Service (PKS) on Amazon Web Services (AWS) using Terraform templates.

The Terraform template for PKS on AWS describes a set of AWS resources and properties.
For more information about how Terraform creates resources in AWS, see the
[AWS Provider](https://www.terraform.io/docs/providers/aws/index.html) topic on the Terraform site.

After you complete this procedure, follow the instructions in the [Configuring Ops Manager on AWS](aws-om-config.html) topic.

## <a id="prereqs"></a>Prerequisites

In addition to fulfilling the prerequisites listed in the [AWS Prerequisites and Resource Requirements](aws-requirements.html) topic, ensure you have the following:

* The [Terraform CLI](https://www.terraform.io/intro/getting-started/install.html)
* In your AWS project, ensure you have an IAM user with the following permissions:
  * AmazonEC2FullAccess
  * AmazonRoute53FullAccess
  * AmazonS3FullAccess
  * AmazonVPCFullAccess
  * IAMFullAccess

## <a id="download"></a>Step 1: Download and Edit the Terraform Variables File

Before you can run Terraform commands to create infrastructure resources, you must fill out a template variables file.
Follow these steps to download and edit the Terraform template variables file:

1. Navigate to the Pivotal Application Service (PAS) release on [Pivotal Network](https://network.pivotal.io).
  <p class="note"><strong>Note</strong>: The AWS Terraform template installs Ops Manager for Pivotal Cloud Foundry (PCF). The template can be used when deploying either PAS or PKS.</p>

1. Download the **AWS Terraform Templates** zip file for the most recent release.

1. Extract the contents of the zip file into a directory and move it into the `workspace` directory on your local machine.

1. From a terminal window, navigate to the directory with the contents of the zip file. For example:
  <pre class="terminal">$ cd ~/workspace/pivotal-cf-terraforming-aws</pre>

1. Navigate to the `pks` directory that contains the PKS Terraform files. Run the following command:

    ```
    cd pks
    ```

1. Create a new file named `terraform.tfvars` within the `pks` directory. Run the following command:

    ``` 
    touch terraform.tfvars
    ```

1. Open the `terraform.tfvars` file and paste in the following contents:

    ```
    env_name           = "YOUR-ENVIRONMENT-NAME"
    access_key         = "YOUR-ACCESS-KEY"
    secret_key         = "YOUR-SECRET-KEY"
    region             = "YOUR-AWS-REGION"
    availability_zones = ["YOUR-AZ-1", "YOUR-AZ-2", "YOUR-AZ-3"]
    ops_manager_ami    = "YOUR-OPS-MAN-IMAGE-AMI"
    dns_suffix         = "YOUR-DNS-SUFFIX"

    ssl_cert = <<SSL_CERT
    -----BEGIN CERTIFICATE-----
    YOUR-CERTIFICATE
    -----END CERTIFICATE-----
    SSL_CERT

    ssl_private_key = <<SSL_KEY
    -----BEGIN EXAMPLE RSA PRIVATE KEY-----
    YOUR-PRIVATE-KEY
    -----END EXAMPLE RSA PRIVATE KEY-----
    SSL_KEY
    ```

1. Edit the values in the file according to the table below:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in AWS. Terraform prepends the names of the resources it creates with this environment name. Example: <code>pks</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ACCESS-KEY</code></td>
      <td>Enter your AWS Access Key ID of the AWS project in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-SECRET-KEY</code></td>
      <td>Enter your AWS Secret Access Key of the AWS project in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-AWS-REGION</code></td>
      <td>Enter the name of the AWS region in which you want Terraform to create resources. Example: <code>us-central1</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZ-1<br>YOUR-AZ-2<br>YOUR-AZ-3</code></td>
      <td>Enter three availability zones from your region. Example: <code>us-central-1a</code>, <code>us-central-1b</code>, <code>us-central-1c</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-AMI</code></td>
      <td>Enter the source code for the Ops Manager Amazon Machine Image (AMI) you want to boot. You can find this code in the PDF included with the Ops Manager release on <a href="https://network.pivotal.io/">Pivotal Network</a>.<br><br>If you want to encrypt your Ops Manager VM, create an encrypted AMI copy from the AWS EC2 dashboard and enter the source code for the coped Ops Manager image instead. For more information about copying an AMI, see <a href="https://docs.pivotal.io/pivotalcf/customizing/pcf-aws-manual-config.html#pcfaws-om-ami">Launch an Ops Manager AMI</a> in <em>Installing PCF on AWS Manually</em> in the Pivotal Cloud Foundry documentation.</td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name for your PKS deployment. Terraform creates DNS records in AWS using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>. For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pks</code> as your environment name, Terraform will create DNS records at <code>pks.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-CERTIFICATE</code></td>
      <td>Enter a certificate to use for HTTP load balancing. For production environments, use a certificate from a Certificate Authority (CA). For test environments, you can use a self-signed certificate.

      Your certificate must specify your PKS domain as the common name. Your PKS domain is <code>YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX</code>.

      It also must include the <code>\*.pks.YOUR-PKS-DOMAIN</code> subdomain.</p></td>
    </tr>
    <tr>
      <td><code>YOUR-PRIVATE-KEY</code></td>
      <td>Enter a private key for the certificate you entered.</td>
    </tr>
  </table>

## <a id="download"></a>Step 2: Create AWS Resources with Terraform ##

Follow these steps to use the Terraform CLI to create resources on AWS:

1. From the `pks` directory that contains the PKS Terraform files, run `terraform init` to initialize the directory based on the information you specified in the `terraform.tfvars` file:

    ```
    terraform init
    ```

1. Run `terraform plan -out=plan` to create the execution plan for Terraform:

    ```
    terraform plan -out=plan
    ```

1. Run `terraform apply plan` to execute the plan from the previous step. It may take several minutes for Terraform to create all the resources in AWS.
  
    ```
    terraform apply plan
    ```

## <a id="dns"></a>Step 4: Create DNS Record ##

1. In a browser, navigate to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.

## <a id="next"></a> Next Steps

After you complete this procedure, follow the instructions in the [Configuring Ops Manager on AWS](aws-om-config.html) topic.
