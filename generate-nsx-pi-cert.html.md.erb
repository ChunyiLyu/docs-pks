---
title: Generating and Registering the NSX Manager Super User Principle Identity Certificate and Key
owner: PKS
---

<strong><%= modified_date %></strong>

This topic describes how to generate and register the NSX Manager Super User Principal Identity Certificate and Key in preparation for installing PKS with NSX-T.

##<a id='certificates-nsx-pid-about'></a> About the NSX Manager Super User Principal Identity

The NSX Manager Super User Principal Identity Certificate and Private Key represents a principal identity with super user permissions that the PKS API will use to communicate with NSX-T to manage (create, delete, and modify) networking resources for Kubernetes cluster nodes. 

When you configure PKS with NSX-T as the container networking interface, for security purposes you will be required to provide the NSX Manager Super User Principal Identity Certificate and Private Key in the **Networking** pane of the PKS tile:

    <img src="images/nsxt/nsx-pi-cert.png" alt="NSX Manager Principal Identity Certificate and Key" width="375">

For more information, see the [Networking](installing-nsx-t.html#networking).

##<a id='certificates-nsx-pid-options'></a> Options for Generating the NSX Manager Super User Principal Identity Certificate and Key

There are two options for generating the principal identity certificate and private key:
- [Option A](#certificate-super-user-ui): Automatically using the **Generate RSA Certificate** option in the PKS Tile
- [Option B](#certificate-super-user-script): Manually by running a script on a Linux host with OpenSSL installed that generates the required certificate and private key

Once you have generated the principal identity certificate and key, you must register both with the NSX Manager. This is done using an HTTPS POST operation on the NSX API. There is no user interface for this operation.

##<a id='certificate-super-user-ui'></a> Option A: Generate the NSX Manager Super User Principal Identity Certificate and Key Automatically and Register Them

###<a id='generate-pi-cert-ui'> Step 1. Generate Certificate and Key from the PKS Networking Tab

To create the certificate from the **Networking** tab in the PKS tile, follow the steps below.

1. Navigate to the **Networking** tab in the PKS tile. For more information, see [Networking](installing-nsx-t.html#networking) in _Installing PKS on vSphere with NSX-T Integration_.
1. Click **Generate RSA Certificate** and provide a wildcard domain, for example, `*.nsx.pks.vmware.local`.
1. In the Ops Manager or Linux VM where the subsequent scripts will run, create a file named `pks-nsx-t-superuser.crt` and copy the generated certificate into it.
1. In the Ops Manager or Linux VM where the subsequent scripts will run, create a file named `pks-nsx-t-superuser.key` and copy the private key into it.

###<a id='copy-pi-cert'> Step 2. Copy Cert and Key to Linux VM

1. On a Linux VM , create a file named `pks-nsx-t-superuser.crt` and copy the generated certificate into it.
1. On the same Linux VM, create a file named `pks-nsx-t-superuser.key` and copy the private key into it.
1. Save both files.

<p class="note"><strong>Note</strong>: The Linux VM must have OpenSSL installed and have network access to the NSX Manager. The PKS Client VM where you have installed the PKS CLI is a good place to perform these actions.</p>

###<a id='variables'></a> Step 3. Export environment variables

1. On the Linux VM where you created the cert and key files, export the following variables.
1. Change the `NSX_MANAGER_IP`, `NSX_MANAGER_USERNAME`, and `NSX_MANAGER_PASSWORD` values to match your environment.

```
export NSX_MANAGER="<NSX_MANAGER_IP>"
export NSX_USER="<NSX_MANAGER_USERNAME>"
export NSX_PASSWORD='<NSX_MANAGER_PASSWORD>'
export PI_NAME="pks-nsx-t-superuser"
export NSX_SUPERUSER_CERT_FILE="pks-nsx-t-superuser.crt"
export NSX_SUPERUSER_KEY_FILE="pks-nsx-t-superuser.key"
export NODE_ID=$(cat /proc/sys/kernel/random/uuid)
```

###<a id='register-pi-certificate'></a> Step 4: Register the Certificate

On the same Linxu VM, run the following commands to register the certificate with NSX Manager.

<pre class="terminal">
cert_request=$(cat &lt;&lt;END
  {
    "display_name": "$PI_NAME",
    "pem_encoded": "$(awk '{printf "%s\\n", $0}' $NSX_SUPERUSER_CERT_FILE)"
  }
END
)
</pre>

<pre class="terminal">
curl -k -X POST \
"https://${NSX_MANAGER}/api/v1/trust-management/certificates?action=import" \
-u "$NSX_USER:$NSX_PASSWORD" \
-H 'content-type: application/json' \
-d "$cert_request"
</pre>

1. Verify that the response includes the `CERTIFICATE_ID` value, which you will need for the next step.

###<a id='register-pi'></a> Step 5: Register the Principal Identity

1. On the same Linxu VM, export the `CERTIFICATE_ID` environment variable, where the value is the response from the previous step.

```
export CERTIFICATE_ID="<CERTIFICATE_ID>"
```

1. Register the principal identity with NSX Manager by running the following commands:

<pre class="terminal">
pi_request=$(cat &lt;&lt;END
  {
    "display_name": "$PI_NAME",
    "name": "$PI_NAME",
    "permission_group": "superusers",
    "certificate_id": "$CERTIFICATE_ID",
    "node_id": "$NODE_ID"
  }
END
)
</pre>

<pre class="terminal">
curl -k -X POST \
  "https://${NSX_MANAGER}/api/v1/trust-management/principal-identities" \
  -u "$NSX_USER:$NSX_PASSWORD" \
  -H 'content-type: application/json' \
  -d "$pi_request"
</pre>

###<a id='verify-pi-certificate'></a> Step 6: Verify the Certificate and Key

To verify that the certificate and key can be used with NSX-T, complete the following steps:

<pre class="terminal">
curl -k -X GET \
"https://${NSX_MANAGER}/api/v1/trust-management/principal-identities" \
--cert $(pwd)/"$NSX_SUPERUSER_CERT_FILE" \
--key $(pwd)/"$NSX_SUPERUSER_KEY_FILE"
</pre>

##<a id='certificate-super-user-script'></a> Option B: Generate the NSX Manager Super User Principal Identity Certificate and Key and Register Them Using Scripts

This option provides bash shell scripts for generating and registering the principal identity certificate and key.

<p class="note"><strong>Note</strong>: The Linux VM where you run the scripts must have OpenSSL installed and have network access to the NSX Manager. The PKS Client VM where you have installed the PKS CLI is a good place to perform these actions.</p>

### Step 1: Run Script to Create and Register Certificate and Key

Provided below is the `create_certificate.sh` script that generates a certificate and private key, and uploads the certificate to the NSX Manager. Complete the following steps to run this script.

1. Log into a Linux VM in your PKS environment, such as the PKS Client VM.
1. Run the following command to create an empty file for the first script: `nano create_certificate.sh`.
1. Copy the script contents provided below to this file and save it.
1. Update the values for the first two lines to match your environment: 
- NSX_MANAGER_IP – IP address of the NSX Manager host
- NSX_MANAGER_USERNAME – Username for NSX Manager
1. Save the script and run it using the following command: `bash create_certificate.sh`.
1. When prompted enter the NSX_MANAGER_PASSWORD for the NSX user you specified in the script.
1. Verify results. 
- The certifcate (`pks-nsx-t-superuser.crt`) and private key (`pks-nsx-t-superuser.key`) are generated in the directory where the script was run; 
- The certificate is uploaded to the NSX Manager and the CERTIFICATE_ID value is returned to the console. You need this ID for the second script.
  

```
#!/bin/bash
#create_certificate.sh

NSX_MANAGER="<NSX_MANAGER_IP>"
NSX_USER="<NSX_MANAGER_USERNAME>"


PI_NAME="pks-nsx-t-superuser"
NSX_SUPERUSER_CERT_FILE="pks-nsx-t-superuser.crt"
NSX_SUPERUSER_KEY_FILE="pks-nsx-t-superuser.key"

stty -echo
printf "Password: "
read NSX_PASSWORD
stty echo

openssl req \
  -newkey rsa:2048 \
  -x509 \
  -nodes \
  -keyout "$NSX_SUPERUSER_KEY_FILE" \
  -new \
  -out "$NSX_SUPERUSER_CERT_FILE" \
  -subj /CN=pks-nsx-t-superuser \
  -extensions client_server_ssl \
  -config <(
    cat /etc/ssl/openssl.cnf \
    <(printf '[client_server_ssl]\nextendedKeyUsage = clientAuth\n')
  ) \
  -sha256 \
  -days 730

cert_request=$(cat &lt;&lt;END
  {
    "display_name": "$PI_NAME",
    "pem_encoded": "$(awk '{printf "%s\\n", $0}' $NSX_SUPERUSER_CERT_FILE)"
  }
END
)

curl -k -X POST \
    "https://${NSX_MANAGER}/api/v1/trust-management/certificates?action=import" \
    -u "$NSX_USER:$NSX_PASSWORD" \
    -H 'content-type: application/json' \
    -d "$cert_request"
```

### Step 2: Run Script to Create and Register Principal Identity

Provided below is the `create_pi.sh` script that creates the principal identity and registers it with the NSX Manager. This script requires the `CERTIFICATE_ID` returned from the `create_certificate.sh` script.

<p class="note"><strong>Note</strong>: Perform these steps on the same Linux VM where you ran the `create_certificate.sh` script.</p>

1. Run the following command to create an empty file for the second script: `nano create_pi.sh`.
1. Copy the script contents provided below to this file and save it.
1. Update the values for the first three lines to match your environment: 
- NSX_MANAGER_IP – IP address of the NSX Manager host
- NSX_MANAGER_USERNAME – Username for NSX Manager
- CERTIFICATE_ID – Response from the `create_certificate.sh` script
1. Save the script and run it using the following command: `bash create_pi.sh`.
1. When prompted enter the NSX_MANAGER_PASSWORD for the NSX user you specified in the script.
1. When you configure PKS for deployment, copy and paste the contents of the `pks-nsx-t-superuser.crt` and `pks-nsx-t-superuser.key` to the NSX Manager Super User Principal Identity Certificate fields in the **Networking** pane of the PKS tile. For more information, see the [Networking](installing-nsx-t.html#networking).

```
#!/bin/bash
#create_pi.sh

NSX_MANAGER="<NSX_MANAGER_IP>"
NSX_USER="<NSX_MANAGER_USERNAME>"
CERTIFICATE_ID='<CERTIFICATE_ID>'


PI_NAME="pks-nsx-t-superuser"
NSX_SUPERUSER_CERT_FILE="pks-nsx-t-superuser.crt"
NSX_SUPERUSER_KEY_FILE="pks-nsx-t-superuser.key"
NODE_ID=$(cat /proc/sys/kernel/random/uuid)

stty -echo
printf "Password: "
read NSX_PASSWORD
stty echo

pi_request=$(cat &lt;&lt;END
    {
         "display_name": "$PI_NAME",
         "name": "$PI_NAME",
         "permission_group": "superusers",
         "certificate_id": "$CERTIFICATE_ID",
         "node_id": "$NODE_ID"
    }
END
)

curl -k -X POST \
    "https://${NSX_MANAGER}/api/v1/trust-management/principal-identities" \
    -u "$NSX_USER:$NSX_PASSWORD" \
    -H 'content-type: application/json' \
    -d "$pi_request"

curl -k -X GET \
    "https://${NSX_MANAGER}/api/v1/trust-management/principal-identities" \
    --cert $(pwd)/"$NSX_SUPERUSER_CERT_FILE" \
    --key $(pwd)/"$NSX_SUPERUSER_KEY_FILE"
```